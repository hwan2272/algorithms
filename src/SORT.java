public class SORT {
    //정렬
    //선택정렬, 버블정렬, 삽입정렬, 병합정렬, 퀵정렬

    public static void main(String[] args) throws Exception {
        int arr[] = {3,5,8,11,6,9};
        selectionSort(arr);
        bubbleSort(arr);
        insertionSort(arr);
        mergeSort(arr);
        quickSort(arr);
    }

    public static void selectionSort(int[] arr) { //선택정렬
        //i=0, j=1 부터 돌면서 작은값과 큰값을 서로 선택하여 교체함
        //{3,5,8,11,6,9} i=3
        //{3,5,8,11,6,9} i=5
        //{3,5,6,11,8,9} i=6
        //{3,5,6,8,11,9} i=8
        //{3,5,6,8,9,11} i=9
        //시간복잡도 O(n^2) 오더엔제곱
    }

    public static void bubbleSort(int[] arr) { //버블정렬
        //i=0, j=1 부터 돌면서 바로 뒤의값과 비교하여 교체
        //{3,5,8,11,6,9} i=3
        //{3,5,8,11,6,9} i=5
        //{3,5,8,11,6,9} i=8
        //{3,5,8,6,11,9} i=11인데 swap되면서 6
        //{3,5,8,6,9,11} i=9 //최대값11
        
        //{3,5,8,6,9} i=3 //최대값 제외 나머지 정렬시작
        //{3,5,8,6,9} i=5
        //{3,5,6,8,9} i=8인데 swap되면서 6
        //{3,5,6,8,9} i=8 //정렬완료
    }

    public static void insertionSort(int[] arr) { //삽입정렬
        //작은값을 사이에 삽입하여 정렬시킴
        //최소값이 맨 앞에 오도록 정렬
        //{3,5,8,11,6,9}
        //{3,5,6,8,11,9} 6을 8앞에 삽입
        //{3,5,6,8,9,11} 9를 11앞에 삽입
    }

    public static void mergeSort(int[] arr) { //병합정렬
        //반씩 나누어 정렬시키고, 합침
        //나눌때 최소 요소가 1개가 되도록 계속 나눔
        //분할,정복,병합
        //{3,5,8}{11,6,9} //나눔 
        //{3}{5,8}{11}{6,9} //요소가 2개이므로 1개될때까지 다시 나눔
        //{3}{5}{8}{11}{6}{9} //요소 1개
        //{3}{5}{6}{8}{9}{11} //정렬
        //{3}{5,6}{8}{9,11} //합침
        //{3,5,6}{8,9,11} //합침
        //{3,5,6,8,9,11} //최종
    }

    public static void quickSort(int[] arr) { //퀵정렬
        //반씩 나누어 정렬시키고, 합침
        //분할,정복
    }
}
